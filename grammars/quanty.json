{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Quanty",
  "scopeName": "source.qy",
  "fileTypes": ["qy", "quanty"],
  "patterns": [{ "include": "#quanty" }],
  "repository": {
    "quanty": {
      "patterns": [
        { "include": "#quanty-comment" },
        { "include": "#quanty-import" },
        { "include": "#quanty-component" },
        { "include": "#quanty-store" }
      ]
    },
    "quanty-comment": {
      "patterns": [
        {
          "comment": "need to prefix comment space with a scope else Atom's reflow cmd doesn't work",
          "name": "comment.line.quanty",
          "match": "(\\s*)(#).*",
          "captures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.quanty"
            }
          }
        },
        {
          "name": "comment.line.quanty",
          "begin": "(\"\"\")",
          "end": "(\"\"\")",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.quanty"
            }
          }
        }
      ]
    },
    "quanty-import": {
      "name": "meta.import.quanty",
      "begin": "\\s*(\\bimport\\b)\\s+(\\()",
      "end": "(?<=\\))",
      "captures": {
        "1": { "name": "keyword.import.quanty" },
        "2": { "name": "punctuation.brace.left.quanty" }
      },
      "patterns": [
        {
          "name": "string.path",
          "begin": "(\")",
          "end": "(\")"
        }
      ]
    },
    "quanty-string": {
      "name": "string.quoted.double",
      "begin": "(\")",
      "end": "(\")",
      "patterns": [
        {
          "name": "constant.character.escape",
          "match": "(\\\\\")"
        },
        {
          "name": "constant.character.escape",
          "match": "\\{[a-z.0-9,A-Z*_/~-]*\\}|\\\\|\\\\0\\d\\d|\\\\\\w"
        },
        {
          "name": "variable.name",
          "match": "\\$[a-z][a-z.0-9A-Z]*|\\$\\([a-z.0-9,A-Z-]*\\)(\\([.0-9-]+\\))?"
        }
      ]
    },
    "quanty-component": {
      "name": "meta.component.quanty",
      "begin": "\\s*(\\bcomponent\\b)\\s+([A-Z][_0-9A-Za-z]*)?\\s*",
      "end": "(?<=})",
      "captures": {
        "1": { "name": "keyword.component.quanty" },
        "2": { "name": "entity.name.component.quanty" }
      },
      "patterns": [
        { "include": "#quanty-comment" },
        { "include": "#quanty-html-set" },
        { "include": "#quanty-directive" },
        { "include": "#quanty-skip-newlines" }
      ]
    },
    "quanty-store": {
      "name": "meta.store.quanty",
      "begin": "\\s*(\\bstore\\b)\\s+([A-Z][_0-9A-Za-z]*)?\\s*",
      "end": "(?<=})",
      "captures": {
        "1": { "name": "keyword.store.quanty" },
        "2": { "name": "entity.name.store.quanty" }
      },
      "patterns": [
        { "include": "#quanty-comment" },
        { "include": "#quanty-store-set" },
        { "include": "#quanty-directive" },
        { "include": "#quanty-skip-newlines" }
      ]
    },
    "quanty-store-set": {
      "name": "meta.storeset.quanty",
      "begin": "\\s*({)",
      "end": "\\s*(})",
      "beginCaptures": {
        "1": { "name": "punctuation.operation.quanty" }
      },
      "endCaptures": {
        "1": { "name": "punctuation.operation.quanty" }
      },
      "patterns": [
        { "include": "#quanty-comment" },
        { "include": "#quanty-store-field" }
      ]
    },
    "quanty-store-field": {
      "patterns": [
        {
          "match": "\\s*([_A-Za-z][_0-9A-Za-z]*)\\s*(:)",
          "captures": {
            "1": { "name": "string.unquoted.alias.quanty" },
            "2": { "name": "punctuation.colon.quanty" }
          }
        },
        {
          "match": "\\s*(\\bInt\\b)\\s*(=)\\s*(0|[1-9][0-9]*)",
          "captures": {
            "1": { "name": "meta.parameter.type" },
            "2": { "name": "punctuation.equal" },
            "3": { "name": "support.property-value" }
          }
        },
        {
          "begin": "\\s*(\\bfun\\b)\\s*",
          "end": "(?<=})",
          "captures": {
            "1": { "name": "keyword.fun.quanty" },
            "2": { "name": "entity.name.store.quanty" }
          },
          "patterns": [
            { "include": "#quanty-function" }
          ]
        },
        { "include": "#quanty-skip-newlines" }
      ]
    },
    "quanty-function": {
      "name": "support.function",
      "begin": "\\s*({)",
      "end": "\\s*(})",
      "beginCaptures": {
        "1": { "name": "punctuation.operation.quanty" }
      },
      "endCaptures": {
        "1": { "name": "punctuation.operation.quanty" }
      },
      "patterns": [
        { "include": "#quanty-comment" },
        {
          "name": "add.quanty",
          "match": "\\s*([_A-Za-z][_0-9A-Za-z]*)\\s*(\\+)\\s*(0|[1-9][0-9]*)",
          "captures": {
            "1": { "name": "support.variable" },
            "2": { "name": "operator.add" },
            "3": { "name": "support.property-value" }
          }
        },
        {
          "name": "sub.quanty",
          "match": "\\s*([_A-Za-z][_0-9A-Za-z]*)\\s*(\\-)\\s*(0|[1-9][0-9]*)",
          "captures": {
            "1": { "name": "support.variable" },
            "2": { "name": "operator.sub" },
            "3": { "name": "support.property-value" }
          }
        }
      ]
    },
    "quanty-html-set": {
      "name": "meta.htmlset.quanty",
      "begin": "\\s*({)",
      "end": "\\s*(})",
      "beginCaptures": {
        "1": { "name": "punctuation.operation.quanty" }
      },
      "endCaptures": {
        "1": { "name": "punctuation.operation.quanty" }
      },
      "patterns": [
        { "include": "#quanty-comment" },
        { "include": "#quanty-field" },
        { "include": "#quanty-string" },
        { "include": "#quanty-comma" }
      ]
    },
    "quanty-field": {
      "patterns": [
        {
          "match": "\\s*([_A-Za-z][_0-9A-Za-z]*)\\s*(:)",
          "captures": {
            "1": { "name": "string.unquoted.alias.quanty" },
            "2": { "name": "punctuation.colon.quanty" }
          }
        },
        {
          "match": "\\s*([a-z]+)",
          "captures": {
            "1": { "name": "entity.name.tag" }
          }
        },
        { "include": "#quanty-arguments" },
        { "include": "#quanty-directive" },
        { "include": "#quanty-html-set" },
        { "include": "#quanty-skip-newlines" }
      ]
    },
    "quanty-directive": {
      "name": "meta.directive.quanty",
      "begin": "\\s*(@)([a-z][A-Za-z0-9_]+)",
      "end": "(?=.)",
      "applyEndPatternLast": 1,
      "beginCaptures": {
        "1": { "name": "keyword.directive.quanty" },
        "2": { "name": "support.directive.quanty" }
      },
      "patterns": [{ "include": "#quanty-arguments" }]
    },
    "quanty-arguments": {
      "name": "meta.arguments.quanty",
      "begin": "\\s*(\\()",
      "end": "\\s*(\\))",
      "beginCaptures": {
        "1": { "name": "meta.brace.round.directive.quanty" }
      },
      "endCaptures": {
        "1": { "name": "meta.brace.round.directive.quanty" }
      },
      "patterns": [
        { "include": "#quanty-comment" },
        {
          "begin": "\\s*([_A-Za-z][_0-9A-Za-z]*)(?:\\s*(:))",
          "end": "(?=\\s*(?:(?:([_A-Za-z][_0-9A-Za-z]*)\\s*(:))|\\)))|\\s*(,)",
          "beginCaptures": {
            "1": { "name": "variable.parameter.quanty" },
            "2": { "name": "punctuation.colon.quanty" }
          },
          "endCaptures": {
            "3": { "name": "punctuation.comma.quanty" }
          },
          "patterns": [
            { "include": "#quanty-comment" },
            { "include": "#quanty-variable-name" },
            { "include": "#quanty-string" },
            { "include": "#quanty-skip-newlines" }
          ]
        }
      ]
    },
    "quanty-variable-name": {
      "match": "\\s*(\\$[_A-Za-z][_0-9A-Za-z]*)",
      "captures": {
        "1": { "name": "variable.quanty" }
      }
    },
    "quanty-comma": {
      "match": "\\s*(,)",
      "captures": {
        "1": { "name": "punctuation.comma.quanty" }
      }
    },
    "quanty-ignore-spaces": {
      "match": "\\s*"
    },
    "quanty-skip-newlines": {
      "match": "\\s*\n"
    }
  }
}
