import path = require("path");
import * as vscode from "vscode";

import {
  LanguageClient,
  LanguageClientOptions,
  ServerOptions,
  TransportKind,
} from 'vscode-languageclient/node';

let client: LanguageClient;

export function activate(ctx: vscode.ExtensionContext): void {

  // const completion = vscode.languages.registerCompletionItemProvider("quanty", {
  //   provideCompletionItems() {

  //     const importCompletion = new vscode.CompletionItem('import', vscode.CompletionItemKind.Keyword)
  //     importCompletion.commitCharacters = ['"']
  //     importCompletion.insertText = new vscode.SnippetString('import ($1)')

  //     return [
  //       importCompletion,
  //     ];
  //   },
  // });


  // ctx.subscriptions.push(
  //   completion,
  // )

  const serverPath = ctx.asAbsolutePath(path.join('server', 'main'));
  let serverOptions: ServerOptions = {
    command: serverPath,
    transport: TransportKind.ipc,
    options: {
      shell: true,
    }
  };

  // Options to control the language client
  let clientOptions: LanguageClientOptions = {
    // Register the server for plain text documents
    documentSelector: [{ scheme: 'file', language: 'quanty' }],
    synchronize: {
      // Notify the server about file changes to '.clientrc files contained in the workspace
      fileEvents: vscode.workspace.createFileSystemWatcher('**/.clientrc')
    },
    progressOnInitialization: true,
  };

  // Create the language client and start the client.
  client = new LanguageClient(
    'languageServerExample',
    'Language Server Example',
    serverOptions,
    clientOptions,
    true,
  );

  // Start the client. This will also launch the server
  client.start();

  client.traceOutputChannel.show();

  vscode.window.showInformationMessage("Quanty-Lang is now active!");
}

export function deactivate() {
  vscode.window.showInformationMessage("Quanty-Lang is now de-active");
  
  if (!client) {
    return undefined;
  }
  return client.stop();
}
